definitions:
  auth.TokenRes:
    properties:
      access_token:
        type: string
      id:
        type: string
      refresh_token:
        type: string
    type: object
  auth.UserRes:
    properties:
      bio:
        type: string
      created_at:
        type: string
      email:
        type: string
      followers:
        type: integer
      follows:
        type: integer
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
  handler.ChangePasswordReq:
    properties:
      newPassword:
        type: string
      oldPassword:
        type: string
    type: object
  handler.LoginReq:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  handler.UserCreateReq:
    properties:
      bio:
        type: string
      email:
        type: string
      image_url:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  handler.UserUpdateReq:
    properties:
      bio:
        type: string
      email:
        type: string
      image_url:
        type: string
      name:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
paths:
  /auth/user/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with username and password
      parameters:
      - description: User login credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.LoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: JWT tokens
          schema:
            $ref: '#/definitions/auth.TokenRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      summary: Login a user
      tags:
      - user
  /auth/user/password/change:
    put:
      consumes:
      - application/json
      description: ChangePassword
      parameters:
      - description: Passwrod change credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.ChangePasswordReq'
      produces:
      - application/json
      responses:
        "200":
          description: Changed password
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Invalid password
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: ChangePassword
      tags:
      - user
  /auth/user/profile:
    get:
      consumes:
      - application/json
      description: Get a profile
      produces:
      - application/json
      responses:
        "200":
          description: Profile
          schema:
            $ref: '#/definitions/auth.UserRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a profile
      tags:
      - user
  /auth/user/profile/delete:
    delete:
      consumes:
      - application/json
      description: Delete a user
      produces:
      - application/json
      responses:
        "200":
          description: User deleted
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - user
  /auth/user/profile/get:
    get:
      consumes:
      - application/json
      description: Get a profile
      parameters:
      - description: Id
        in: query
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Profile
          schema:
            $ref: '#/definitions/auth.UserRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Get a profile
      tags:
      - user
  /auth/user/register:
    post:
      consumes:
      - application/json
      description: Register user
      parameters:
      - description: User register credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.UserCreateReq'
      produces:
      - application/json
      responses:
        "200":
          description: JWT tokens
          schema:
            $ref: '#/definitions/auth.TokenRes'
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Invalid username or password
          schema:
            type: string
      summary: Register a user
      tags:
      - user
  /auth/user/update:
    put:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: User update credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handler.UserUpdateReq'
      produces:
      - application/json
      responses:
        "200":
          description: User updated
          schema:
            type: string
        "400":
          description: Invalid request payload
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - user
  /file-upload:
    post:
      consumes:
      - multipart/form-data
      description: File upload
      parameters:
      - description: File
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      security:
      - BearerAuth: []
      summary: File upload
      tags:
      - file-upload
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
